package com.example.narendra.celusiontest.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CUSTOMER.
*/
public class CustomerDao extends AbstractDao<Customer, String> {

    public static final String TABLENAME = "CUSTOMER";

    /**
     * Properties of entity Customer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CustomerID = new Property(0, String.class, "CustomerID", true, "CUSTOMER_ID");
        public final static Property ContactName = new Property(1, String.class, "ContactName", false, "CONTACT_NAME");
        public final static Property ContactTitle = new Property(2, String.class, "ContactTitle", false, "CONTACT_TITLE");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property CompanyName = new Property(4, String.class, "CompanyName", false, "COMPANY_NAME");
        public final static Property Region = new Property(5, String.class, "Region", false, "REGION");
        public final static Property Fax = new Property(6, String.class, "Fax", false, "FAX");
        public final static Property Address = new Property(7, String.class, "Address", false, "ADDRESS");
        public final static Property Country = new Property(8, String.class, "Country", false, "COUNTRY");
        public final static Property City = new Property(9, String.class, "City", false, "CITY");
        public final static Property PostalCode = new Property(10, Integer.class, "PostalCode", false, "POSTAL_CODE");
    };

    private DaoSession daoSession;


    public CustomerDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER' (" + //
                "'CUSTOMER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: CustomerID
                "'CONTACT_NAME' TEXT," + // 1: ContactName
                "'CONTACT_TITLE' TEXT," + // 2: ContactTitle
                "'PHONE' TEXT," + // 3: phone
                "'COMPANY_NAME' TEXT," + // 4: CompanyName
                "'REGION' TEXT," + // 5: Region
                "'FAX' TEXT," + // 6: Fax
                "'ADDRESS' TEXT," + // 7: Address
                "'COUNTRY' TEXT," + // 8: Country
                "'CITY' TEXT," + // 9: City
                "'POSTAL_CODE' INTEGER);"); // 10: PostalCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Customer entity) {
        stmt.clearBindings();
 
        String CustomerID = entity.getCustomerID();
        if (CustomerID != null) {
            stmt.bindString(1, CustomerID);
        }
 
        String ContactName = entity.getContactName();
        if (ContactName != null) {
            stmt.bindString(2, ContactName);
        }
 
        String ContactTitle = entity.getContactTitle();
        if (ContactTitle != null) {
            stmt.bindString(3, ContactTitle);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String CompanyName = entity.getCompanyName();
        if (CompanyName != null) {
            stmt.bindString(5, CompanyName);
        }
 
        String Region = entity.getRegion();
        if (Region != null) {
            stmt.bindString(6, Region);
        }
 
        String Fax = entity.getFax();
        if (Fax != null) {
            stmt.bindString(7, Fax);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(8, Address);
        }
 
        String Country = entity.getCountry();
        if (Country != null) {
            stmt.bindString(9, Country);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(10, City);
        }
 
        String PostalCode = entity.getPostalCode();
        if (PostalCode != null) {
            stmt.bindString(11, PostalCode);
        }
    }

    @Override
    protected void attachEntity(Customer entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Customer readEntity(Cursor cursor, int offset) {
        Customer entity = new Customer( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // CustomerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ContactName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ContactTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CompanyName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Region
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Fax
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Country
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // City
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // PostalCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Customer entity, int offset) {
        entity.setCustomerID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setContactName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContactTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompanyName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFax(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCountry(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPostalCode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Customer entity, long rowId) {
        return entity.getCustomerID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Customer entity) {
        if(entity != null) {
            return entity.getCustomerID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
